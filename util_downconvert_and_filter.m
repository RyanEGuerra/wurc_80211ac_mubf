function [ Y ] = util_downconvert_and_filter( X, BW, PREAM )
%function [ Y ] = util_downconvert_and_filter( X, BW, PREAM )
%
%   Do what the title says. This automatically detects and outputs filtered
%   streams on the column vectors.
%
%   The PREAM struct is generated by util_gen_cyclic_shift_preamble() and
%   is required for pre-computed filter coefficients.
%
%   (c) ryan@guerra.rocks 2015
%   http://www.apache.org/licenses/LICENSE-2.0

    SAMPLE_RATE = 40;

    % find the dimention of X that is the time sample dimension (to handle
    % transpositions, etc...
    dim = find(size(X)==max(size(X)));
    if dim==2
        X = transpose(X);
    end

    % Generate the filter coefficients (TODO: do this during init phase)
    INTERP_RATE = SAMPLE_RATE/BW;
    switch(BW)
        case 5
            interp_filt = PREAM.F5M_coeff;
        case 10
            interp_filt = PREAM.F10M_coeff;
        case 20
            interp_filt = PREAM.F20M_coeff;
        case 40
            interp_filt = 1;
        otherwise
            error(['Can only support 5/10/20/40 BW filters. You gave: ' num2str(BW)]);
    end


    %If X is a matrix and H is a vector, each column of X is filtered through H.
    % upfirdn(X,H,P,Q) is a cascade of three systems applied to input signal X:
    % (1) Upsampling by P (zero insertion).  P defaults to 1 if not 
    %   specified.
    % (2) FIR filtering with the filter specified by the impulse response 
    %   given in H.
    % (3) Downsampling by Q (throwing away samples).  Q defaults to 1 if not 
    %   specified.
    if  license('test', 'Signal_Toolbox')
        try
            Y = upfirdn(X, interp_filt, 1, INTERP_RATE);
        catch myerr
            warning('%s: dropping into keyboard for debug...', mfilename);
            keyboard
        end
    else
        Y = zeros(size(X,1)/INTERP_RATE, size(X,2));
        for vec = 1:1:size(X,2)
            % filter
            Xx = X(:,vec);
            Xy = filter(interp_filt, 1, Xx);
            % downconvert
            Y(:,vec) = Xy(1:INTERP_RATE:end);
        end
    end

end
